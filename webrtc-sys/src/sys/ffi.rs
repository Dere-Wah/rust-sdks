/* automatically generated by rust-bindgen 0.69.4 */

pub type lkRefCounted = ::std::os::raw::c_void;
pub type lkPeerFactory = ::std::os::raw::c_void;
pub type lkPeer = ::std::os::raw::c_void;
pub type lkDataChannel = ::std::os::raw::c_void;
pub type lkRtpTransceiver = ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkIceTransportType {
    LK_ICE_TRANSPORT_TYPE_NONE = 0,
    LK_ICE_TRANSPORT_TYPE_RELAY = 1,
    LK_ICE_TRANSPORT_TYPE_NO_HOST = 2,
    LK_ICE_TRANSPORT_TYPE_ALL = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkContinualGatheringPolicy {
    LK_GATHERING_POLICY_ONCE = 0,
    LK_GATHERING_POLICY_CONTINUALLY = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkPeerState {
    LK_PEER_STATE_NEW = 0,
    LK_PEER_STATE_CONNECTING = 1,
    LK_PEER_STATE_CONNECTED = 2,
    LK_PEER_STATE_DISCONNECTED = 3,
    LK_PEER_STATE_FAILED = 4,
    LK_PEER_STATE_CLOSED = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkSignalingState {
    LK_SIGNALING_STATE_STABLE = 0,
    LK_SIGNALING_STATE_HAVE_LOCAL_OFFER = 1,
    LK_SIGNALING_STATE_HAVE_LOCAL_PRANSWER = 2,
    LK_SIGNALING_STATE_HAVE_REMOTE_OFFER = 3,
    LK_SIGNALING_STATE_HAVE_REMOTE_PRANSWER = 4,
    LK_SIGNALING_STATE_CLOSED = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkIceState {
    LK_ICE_STATE_NEW = 0,
    LK_ICE_STATE_CHECKING = 1,
    LK_ICE_STATE_CONNECTED = 2,
    LK_ICE_STATE_COMPLETED = 3,
    LK_ICE_STATE_FAILED = 4,
    LK_ICE_STATE_DISCONNECTED = 5,
    LK_ICE_STATE_CLOSED = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkSdpType {
    LK_SDP_TYPE_OFFER = 0,
    LK_SDP_TYPE_PRANSWER = 1,
    LK_SDP_TYPE_ANSWER = 2,
    LK_SDP_TYPE_ROLLBACK = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lkDcState {
    LK_DC_STATE_CONNECTING = 0,
    LK_DC_STATE_OPEN = 1,
    LK_DC_STATE_CLOSING = 2,
    LK_DC_STATE_CLOSED = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkIceCandidate {
    pub sdpMid: *const ::std::os::raw::c_char,
    pub sdpMLineIndex: ::std::os::raw::c_int,
    pub sdp: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lkIceCandidate() {
    const UNINIT: ::std::mem::MaybeUninit<lkIceCandidate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkIceCandidate>(),
        24usize,
        concat!("Size of: ", stringify!(lkIceCandidate))
    );
    assert_eq!(
        ::std::mem::align_of::<lkIceCandidate>(),
        8usize,
        concat!("Alignment of ", stringify!(lkIceCandidate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdpMid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkIceCandidate), "::", stringify!(sdpMid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdpMLineIndex) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lkIceCandidate), "::", stringify!(sdpMLineIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdp) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(lkIceCandidate), "::", stringify!(sdp))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkPeerObserver {
    pub onSignalingChange: ::std::option::Option<
        unsafe extern "C" fn(state: lkSignalingState, userdata: *mut ::std::os::raw::c_void),
    >,
    pub onIceCandidate: ::std::option::Option<
        unsafe extern "C" fn(
            candidate: *const lkIceCandidate,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >,
    pub onDataChannel: ::std::option::Option<
        unsafe extern "C" fn(dc: *const lkDataChannel, userdata: *mut ::std::os::raw::c_void),
    >,
    pub onTrack: ::std::option::Option<
        unsafe extern "C" fn(
            transceiver: *const lkRtpTransceiver,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >,
    pub onConnectionChange: ::std::option::Option<
        unsafe extern "C" fn(state: lkPeerState, userdata: *mut ::std::os::raw::c_void),
    >,
    pub onIceCandidateError: ::std::option::Option<
        unsafe extern "C" fn(
            address: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
            url: *const ::std::os::raw::c_char,
            error_code: ::std::os::raw::c_int,
            error_text: *const ::std::os::raw::c_char,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_lkPeerObserver() {
    const UNINIT: ::std::mem::MaybeUninit<lkPeerObserver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkPeerObserver>(),
        48usize,
        concat!("Size of: ", stringify!(lkPeerObserver))
    );
    assert_eq!(
        ::std::mem::align_of::<lkPeerObserver>(),
        8usize,
        concat!("Alignment of ", stringify!(lkPeerObserver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSignalingChange) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lkPeerObserver),
            "::",
            stringify!(onSignalingChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onIceCandidate) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lkPeerObserver), "::", stringify!(onIceCandidate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDataChannel) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(lkPeerObserver), "::", stringify!(onDataChannel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onTrack) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(lkPeerObserver), "::", stringify!(onTrack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onConnectionChange) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lkPeerObserver),
            "::",
            stringify!(onConnectionChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onIceCandidateError) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lkPeerObserver),
            "::",
            stringify!(onIceCandidateError)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkDataChannelObserver {
    pub onStateChange:
        ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>,
    pub onMessage: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const u8,
            size: u64,
            binary: bool,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >,
    pub onBufferedAmountChange: ::std::option::Option<
        unsafe extern "C" fn(sentDataSize: u64, userdata: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_lkDataChannelObserver() {
    const UNINIT: ::std::mem::MaybeUninit<lkDataChannelObserver> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkDataChannelObserver>(),
        24usize,
        concat!("Size of: ", stringify!(lkDataChannelObserver))
    );
    assert_eq!(
        ::std::mem::align_of::<lkDataChannelObserver>(),
        8usize,
        concat!("Alignment of ", stringify!(lkDataChannelObserver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onStateChange) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lkDataChannelObserver),
            "::",
            stringify!(onStateChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onMessage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lkDataChannelObserver),
            "::",
            stringify!(onMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onBufferedAmountChange) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lkDataChannelObserver),
            "::",
            stringify!(onBufferedAmountChange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkIceServer {
    pub urls: *mut *const ::std::os::raw::c_char,
    pub urlsCount: ::std::os::raw::c_int,
    pub username: *const ::std::os::raw::c_char,
    pub password: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lkIceServer() {
    const UNINIT: ::std::mem::MaybeUninit<lkIceServer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkIceServer>(),
        32usize,
        concat!("Size of: ", stringify!(lkIceServer))
    );
    assert_eq!(
        ::std::mem::align_of::<lkIceServer>(),
        8usize,
        concat!("Alignment of ", stringify!(lkIceServer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).urls) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkIceServer), "::", stringify!(urls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).urlsCount) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lkIceServer), "::", stringify!(urlsCount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).username) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(lkIceServer), "::", stringify!(username))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).password) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(lkIceServer), "::", stringify!(password))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkRtcConfiguration {
    pub iceServers: *mut lkIceServer,
    pub iceServersCount: ::std::os::raw::c_int,
    pub iceTransportType: lkIceTransportType,
    pub gatheringPolicy: lkContinualGatheringPolicy,
}
#[test]
fn bindgen_test_layout_lkRtcConfiguration() {
    const UNINIT: ::std::mem::MaybeUninit<lkRtcConfiguration> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkRtcConfiguration>(),
        24usize,
        concat!("Size of: ", stringify!(lkRtcConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<lkRtcConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(lkRtcConfiguration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iceServers) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkRtcConfiguration), "::", stringify!(iceServers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iceServersCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lkRtcConfiguration),
            "::",
            stringify!(iceServersCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iceTransportType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lkRtcConfiguration),
            "::",
            stringify!(iceTransportType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gatheringPolicy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lkRtcConfiguration),
            "::",
            stringify!(gatheringPolicy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkDataChannelInit {
    pub reliable: bool,
    pub ordered: bool,
    pub maxRetransmits: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_lkDataChannelInit() {
    const UNINIT: ::std::mem::MaybeUninit<lkDataChannelInit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkDataChannelInit>(),
        8usize,
        concat!("Size of: ", stringify!(lkDataChannelInit))
    );
    assert_eq!(
        ::std::mem::align_of::<lkDataChannelInit>(),
        4usize,
        concat!("Alignment of ", stringify!(lkDataChannelInit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reliable) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkDataChannelInit), "::", stringify!(reliable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordered) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(lkDataChannelInit), "::", stringify!(ordered))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRetransmits) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lkDataChannelInit),
            "::",
            stringify!(maxRetransmits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkRtcError {
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lkRtcError() {
    const UNINIT: ::std::mem::MaybeUninit<lkRtcError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkRtcError>(),
        8usize,
        concat!("Size of: ", stringify!(lkRtcError))
    );
    assert_eq!(
        ::std::mem::align_of::<lkRtcError>(),
        8usize,
        concat!("Alignment of ", stringify!(lkRtcError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkRtcError), "::", stringify!(message))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkSetSdpObserver {
    pub onSuccess:
        ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>,
    pub onFailure: ::std::option::Option<
        unsafe extern "C" fn(error: *const lkRtcError, userdata: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_lkSetSdpObserver() {
    const UNINIT: ::std::mem::MaybeUninit<lkSetSdpObserver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkSetSdpObserver>(),
        16usize,
        concat!("Size of: ", stringify!(lkSetSdpObserver))
    );
    assert_eq!(
        ::std::mem::align_of::<lkSetSdpObserver>(),
        8usize,
        concat!("Alignment of ", stringify!(lkSetSdpObserver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkSetSdpObserver), "::", stringify!(onSuccess))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lkSetSdpObserver), "::", stringify!(onFailure))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkCreateSdpObserver {
    pub onSuccess: ::std::option::Option<
        unsafe extern "C" fn(
            type_: lkSdpType,
            sdp: *const ::std::os::raw::c_char,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >,
    pub onFailure: ::std::option::Option<
        unsafe extern "C" fn(error: *const lkRtcError, userdata: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_lkCreateSdpObserver() {
    const UNINIT: ::std::mem::MaybeUninit<lkCreateSdpObserver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkCreateSdpObserver>(),
        16usize,
        concat!("Size of: ", stringify!(lkCreateSdpObserver))
    );
    assert_eq!(
        ::std::mem::align_of::<lkCreateSdpObserver>(),
        8usize,
        concat!("Alignment of ", stringify!(lkCreateSdpObserver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lkCreateSdpObserver), "::", stringify!(onSuccess))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lkCreateSdpObserver), "::", stringify!(onFailure))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkOfferAnswerOptions {
    pub iceRestart: bool,
    pub useRtpMux: bool,
}
#[test]
fn bindgen_test_layout_lkOfferAnswerOptions() {
    const UNINIT: ::std::mem::MaybeUninit<lkOfferAnswerOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lkOfferAnswerOptions>(),
        2usize,
        concat!("Size of: ", stringify!(lkOfferAnswerOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<lkOfferAnswerOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(lkOfferAnswerOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iceRestart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lkOfferAnswerOptions),
            "::",
            stringify!(iceRestart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useRtpMux) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(lkOfferAnswerOptions), "::", stringify!(useRtpMux))
    );
}
extern "C" {
    pub fn lkInitialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lkDispose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lkAddRef(rc: *mut lkRefCounted);
}
extern "C" {
    pub fn lkReleaseRef(rc: *mut lkRefCounted);
}
extern "C" {
    pub fn lkCreatePeerFactory() -> *mut lkPeerFactory;
}
extern "C" {
    pub fn lkCreatePeer(
        factory: *mut lkPeerFactory,
        config: *const lkRtcConfiguration,
        observer: *const lkPeerObserver,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut lkPeer;
}
extern "C" {
    pub fn lkCreateDataChannel(
        peer: *mut lkPeer,
        label: *const ::std::os::raw::c_char,
        init: *const lkDataChannelInit,
    ) -> *mut lkDataChannel;
}
extern "C" {
    pub fn lkAddIceCandidate(
        peer: *mut lkPeer,
        candidate: *const lkIceCandidate,
        onComplete: ::std::option::Option<
            unsafe extern "C" fn(error: *mut lkRtcError, userdata: *mut ::std::os::raw::c_void),
        >,
        userdata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn lkSetLocalDescription(
        peer: *mut lkPeer,
        type_: lkSdpType,
        sdp: *const ::std::os::raw::c_char,
        observer: *const lkSetSdpObserver,
        userdata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn lkSetRemoteDescription(
        peer: *mut lkPeer,
        type_: lkSdpType,
        sdp: *const ::std::os::raw::c_char,
        observer: *const lkSetSdpObserver,
        userdata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn lkCreateOffer(
        peer: *mut lkPeer,
        options: *const lkOfferAnswerOptions,
        observer: *const lkCreateSdpObserver,
        userdata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn lkCreateAnswer(
        peer: *mut lkPeer,
        options: *const lkOfferAnswerOptions,
        observer: *const lkCreateSdpObserver,
        userdata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn lkPeerSetConfig(peer: *mut lkPeer, config: *const lkRtcConfiguration) -> bool;
}
extern "C" {
    pub fn lkPeerClose(peer: *mut lkPeer) -> bool;
}
extern "C" {
    pub fn lkDcRegisterObserver(
        dc: *mut lkDataChannel,
        observer: *const lkDataChannelObserver,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn lkDcUnregisterObserver(dc: *mut lkDataChannel);
}
extern "C" {
    pub fn lkDcGetState(dc: *mut lkDataChannel) -> lkDcState;
}
extern "C" {
    pub fn lkDcGetId(dc: *mut lkDataChannel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lkDcSendAsync(
        dc: *mut lkDataChannel,
        data: *const u8,
        size: u64,
        binary: bool,
        onComplete: ::std::option::Option<
            unsafe extern "C" fn(error: *mut lkRtcError, userdata: *mut ::std::os::raw::c_void),
        >,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn lkDcClose(dc: *mut lkDataChannel);
}
